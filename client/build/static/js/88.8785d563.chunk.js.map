{"version":3,"file":"static/js/88.8785d563.chunk.js","mappings":"+IAEA,MAkDA,EAlDoBA,IAAqD,IAApD,UAAEC,EAAS,WAAEC,EAAU,UAAEC,EAAS,SAAEC,GAAUJ,EACjE,MAAOK,EAAQC,IAAaC,EAAAA,EAAAA,UAASC,MAAMP,GAAWQ,KAAK,KACrDC,GAAYC,EAAAA,EAAAA,QAAOH,MAAMP,GAAWQ,KAAK,MAAMG,KAAI,IAAMC,EAAAA,eAEzDC,EAAeA,CAACC,EAAOC,EAAOC,KAClCX,GAAWY,IACT,MAAMC,EAAY,IAAID,GAEtB,OADAC,EAAUJ,GAASC,EACZG,CAAS,IAGlBf,GAAYA,EAASC,EAAOe,KAAK,KAE7BH,GAAeF,EAAQ,GAAKL,EAAUW,QAAQN,EAAQ,GACxDO,YAAW,KACTZ,EAAUW,QAAQN,EAAQ,GAAGM,QAAQE,OAAO,GAC3C,IACON,GAAeF,EAAQd,EAAY,GAAKS,EAAUW,QAAQN,EAAQ,IAC5EO,YAAW,KACTZ,EAAUW,QAAQN,EAAQ,GAAGM,QAAQE,OAAO,GAC3C,EACL,EASIC,EAAchB,MAAMP,GAAWQ,KAAK,MAAMG,KAAI,CAACa,EAAGV,KACtDW,EAAAA,EAAAA,KAAA,SACEC,KAAM,WAENC,UAAS,0DAAAC,OAA4D1B,EAAS,QAC9Ea,MAAOX,EAAOU,GACde,UAAW,EACX1B,SAAW2B,GAAUjB,EAAaC,EAAOgB,EAAMC,OAAOhB,OACtDiB,UAAYF,GAdMG,EAACnB,EAAOgB,KACV,cAAdA,EAAMI,KACRrB,EAAaC,EAAO,IAAI,EAC1B,EAWwBmB,CAAcnB,EAAOgB,GAC3CK,IAAK1B,EAAUW,QAAQN,IANlBA,KAUT,OACEW,EAAAA,EAAAA,KAAA,OAAKE,UAAS,MAAAC,OAAQ3B,EAAU,8CAA6CmC,SAC1Eb,GACG,C","sources":["components/DashedInput.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\n\r\nconst DashedInput = ({ maxlength, background, dashColor, onChange }) => {\r\n  const [inputs, setInputs] = useState(Array(maxlength).fill(''));\r\n  const inputRefs = useRef(Array(maxlength).fill(null).map(() => React.createRef()));\r\n\r\n  const handleChange = (index, value, isBackspace) => {\r\n    setInputs((prevInputs) => {\r\n      const newInputs = [...prevInputs];\r\n      newInputs[index] = value;\r\n      return newInputs;\r\n    });\r\n  \r\n    onChange && onChange(inputs.join(''));\r\n  \r\n    if (isBackspace && index > 0 && inputRefs.current[index - 1]) {\r\n      setTimeout(() => {\r\n        inputRefs.current[index - 1].current.focus();\r\n      }, 0);\r\n    } else if (!isBackspace && index < maxlength - 1 && inputRefs.current[index + 1]) {\r\n      setTimeout(() => {\r\n        inputRefs.current[index + 1].current.focus();\r\n      }, 0);\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (index, event) => {\r\n    if (event.key === 'Backspace') {\r\n      handleChange(index, '', true);\r\n    }\r\n  };\r\n\r\n  const inputFields = Array(maxlength).fill(null).map((_, index) => (\r\n    <input\r\n      type={'password'}\r\n      key={index}\r\n      className={`text-center border-b focus:outline-none m-1 w-6 border-${dashColor} p-1`}\r\n      value={inputs[index]}\r\n      maxLength={1}\r\n      onChange={(event) => handleChange(index, event.target.value)}\r\n      onKeyDown={(event) => handleKeyDown(index, event)}\r\n      ref={inputRefs.current[index]}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <div className={`bg-${background} rounded p-2 flex flex-row overflow-hidden`}>\r\n      {inputFields}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashedInput;\r\n"],"names":["_ref","maxlength","background","dashColor","onChange","inputs","setInputs","useState","Array","fill","inputRefs","useRef","map","React","handleChange","index","value","isBackspace","prevInputs","newInputs","join","current","setTimeout","focus","inputFields","_","_jsx","type","className","concat","maxLength","event","target","onKeyDown","handleKeyDown","key","ref","children"],"sourceRoot":""}